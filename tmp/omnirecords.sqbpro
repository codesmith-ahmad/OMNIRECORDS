<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/OMNIRECORDS/omnirecords.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="7967"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,12:mainExpensesView"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Expenses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="124"/><column index="3" value="66"/><column index="4" value="78"/><column index="5" value="167"/><column index="6" value="135"/><column index="7" value="91"/><column index="8" value="69"/><column index="9" value="300"/><column index="10" value="61"/><column index="11" value="52"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ExpensesLog" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="52"/><column index="3" value="66"/><column index="4" value="78"/><column index="5" value="167"/><column index="6" value="135"/><column index="7" value="85"/><column index="8" value="69"/><column index="9" value="52"/><column index="10" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ExpensesView" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="52"/><column index="2" value="124"/><column index="3" value="147"/><column index="4" value="156"/><column index="5" value="165"/><column index="6" value="95"/><column index="7" value="83"/><column index="8" value="69"/><column index="9" value="300"/><column index="10" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ExpensesViewAggr" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="58"/><column index="3" value="147"/><column index="4" value="138"/><column index="5" value="147"/><column index="6" value="91"/><column index="7" value="153"/><column index="8" value="69"/><column index="9" value="52"/><column index="10" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="months" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="66"/><column index="2" value="124"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">
WITH const AS (SELECT 'name' AS name, 10 AS more)

SELECT Bill, Amount, name, more from Expenses, const</sql><sql name="Edit View ExpensesView">DROP VIEW IF EXISTS &quot;main&quot;.&quot;ExpensesView&quot;;

-- FOLLOW SAME SPIRIT

-- WITH i AS (
--     SELECT customer_id, AVG(total) AS total_avg
--     FROM invoice
--     GROUP BY customer_id
-- ) SELECT c.last_name, c.first_name, i.total_avg
--     FROM customer AS c
--     JOIN i ON c.customer_id = i.customer_id;

CREATE VIEW ExpensesView AS

	WITH

	constants AS (
		SELECT 
			30.437 AS averageDaysInMonth,
			'dummy' AS dummyConstant
	),
	
	dailyRate AS (
		SELECT id, 
		CASE
			  WHEN FrequencyUnit = 'M' THEN Amount / (FrequencyNumber * 30.437)
			  WHEN FrequencyUnit = 'D' THEN Amount / FrequencyNumber
			  ELSE NULL -- Handle other cases if needed
		END AS rate
		FROM Expenses
	)

	SELECT
		-- X to indicate expenses, for frontend purpose
		'X' || e.id AS id,
		-- Bill as is
		Bill,
		-- Calculate rates according to amount and frequency
		(averageDaysInMonth * d.rate) AS Monthly,
		(7 * d.rate) AS Weekly,
		d.rate AS Daily,
		-- Requires external formatting: foreach ($row in $x) {$row.Deadline = (date $row.Deadline -format &quot;MMM d&quot;).toUpper()}
		Deadline,
		-- Calculate time left
		julianday(Deadline) - julianday('now') as Remains,
		-- Source as is
		Source,
		-- isPaid: Change 0/1 to False/True
		CASE
			WHEN isPaid = 0 THEN 'False'
			WHEN isPaid = 1 THEN 'True'
		END AS isPaid,
		-- Note as is
		Note
		
	FROM Expenses  		   AS e
	JOIN constants 		   AS c ON true
	JOIN dailyRate 		   AS d ON d.id = e.id
	
	ORDER BY Deadline</sql><sql name="SQL 5">DROP VIEW IF EXISTS ExpensesViewAggr;
CREATE VIEW ExpensesViewAggr AS
SELECT
    NULL AS id,
    'TOTAL' AS Bill,
    SUM(Monthly) AS Monthly,
    SUM(Weekly) AS Weekly,
    SUM(Daily) AS Daily,
    MIN(Deadline) AS Deadline,  -- You may need to adjust this based on your requirements
    MIN(Remains) AS Remains,   -- You may need to adjust this based on your requirements
    NULL AS Source,    -- You may need to adjust this based on your requirements
    NULL AS Note,      -- You may need to adjust this based on your requirements
    NULL AS isPaid     -- You may need to adjust this based on your requirements
FROM ExpensesView WHERE Source = 'Debit'</sql><sql name="SQL 6">CREATE TABLE &quot;ExpensesLog&quot; (
	&quot;id&quot;	INTEGER UNIQUE,
	&quot;Bill&quot;	TEXT NOT NULL,
	&quot;isLoan&quot;	INTEGER NOT NULL,
	&quot;Amount&quot;	REAL NOT NULL,
	&quot;FrequencyNumber&quot;	INTEGER NOT NULL DEFAULT 1,
	&quot;FrequencyUnit&quot;	TEXT NOT NULL,
	&quot;Deadline&quot;	TEXT NOT NULL,
	&quot;Source&quot;	TEXT NOT NULL,
	&quot;Note&quot;	TEXT,
	&quot;isPaid&quot;	INTEGER NOT NULL,
	PRIMARY KEY(&quot;id&quot; AUTOINCREMENT)
)</sql><current_tab id="0"/></tab_sql></sqlb_project>
